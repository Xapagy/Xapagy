/* XapiLangTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. XapiLangTokenManager.java */
package org.xapagy.xapi.language.parser;
import java.io.File;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;
import java.util.List;
import java.util.HashSet;
import java.util.Set;
import java.util.HashMap;
import java.util.Map;
import org.xapagy.activity.DaHelper;
import org.xapagy.activity.DaComposite;
import org.xapagy.activity.SaHelper;
import org.xapagy.activity.SaComposite;
import org.xapagy.agents.Agent;
import org.xapagy.agents.PerformanceMeter;
import org.xapagy.xapi.Kludges;
import org.xapagy.xapi.KludgeCreateLink;
import org.xapagy.xapi.XapiDictionary;
import org.xapagy.autobiography.ABStory;
import org.xapagy.xapi.MacroGenerator;
import org.xapagy.xapi.XapiFileLoader;
import org.xapagy.parameters.Parameters;
import org.xapagy.ui.SaveLoadUtil;
import org.xapagy.ui.TextUi;
import org.xapagy.ui.prettyprint.PpStory;
import org.xapagy.links.Links;
import org.xapagy.debug.ViMatchFilter;
import org.xapagy.ui.observers.XapiObserver;
import org.xapagy.debug.DebugEvent.DebugEventType;
import org.xapagy.instances.Instance;
import org.xapagy.concepts.Concept;
import org.xapagy.concepts.ConceptDataBaseHelper;
import org.xapagy.concepts.ConceptOverlay;
import org.xapagy.concepts.Verb;
import org.xapagy.concepts.Hardwired;
import org.xapagy.concepts.VerbOverlay;
import org.xapagy.concepts.AbstractConceptDB;
import org.xapagy.domain.IncludeHelper;
import org.xapagy.ui.observers.AbstractAgentObserver.TraceWhat;
import org.xapagy.ui.observers.ToStringObserver;
import org.xapagy.exceptions.NoSuchConceptOrVerb;
import org.xapagy.set.EnergyColors;

/** Token Manager. */
@SuppressWarnings("unused")public class XapiLangTokenManager implements XapiLangConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000000L) != 0L)
            return 75;
         if ((active0 & 0x900L) != 0L)
            return 46;
         if ((active0 & 0xc77e07760f80f400L) != 0L || (active1 & 0x39f5ff7fcfL) != 0L)
         {
            jjmatchedKind = 102;
            return 1;
         }
         if ((active0 & 0x10000L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0xc67e07760f80f400L) != 0L || (active1 & 0x39f1d77fcfL) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x4280000L) != 0L)
            return 1;
         if ((active0 & 0x800L) != 0L)
            return 81;
         return -1;
      case 2:
         if ((active0 & 0xc27e07760d80f000L) != 0L || (active1 & 0x31e1c75fcfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 2;
            }
            return 1;
         }
         if ((active0 & 0x400000002000400L) != 0L || (active1 & 0x810102000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x8200010208005000L) != 0L || (active1 & 0x401d40L) != 0L)
            return 1;
         if ((active0 & 0x407e06740780a000L) != 0L || (active1 & 0x31e187428fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 3;
            }
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x2000010000L) != 0L)
            return 1;
         if ((active0 & 0x407a06740780a000L) != 0L || (active1 & 0x11e1864e8fL) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0x1180840000L) != 0L)
            return 1;
         if ((active0 & 0x407a06340780a000L) != 0L || (active1 & 0x61024e8fL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 5;
            }
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x4000062000800000L) != 0L || (active1 & 0x7L) != 0L)
            return 1;
         if ((active0 & 0x7a00140700a000L) != 0L || (active1 & 0xe1024e88L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 6;
            }
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x6a00140700a000L) != 0L || (active1 & 0xe1024c05L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x10000000000000L) != 0L || (active1 & 0x288L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x2a001403008000L) != 0L || (active1 & 0x21004c05L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x40000004002000L) != 0L || (active1 & 0xc0020000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x2a001401008000L) != 0L || (active1 & 0x20000805L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x2000000L) != 0L || (active1 & 0x1004400L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active0 & 0x28001400008000L) != 0L || (active1 & 0x20000005L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 10;
            }
            return 1;
         }
         if ((active0 & 0x2000001000000L) != 0L || (active1 & 0x800L) != 0L)
            return 1;
         return -1;
      case 11:
         if ((active0 & 0x28001000008000L) != 0L || (active1 & 0x5L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 11;
            return 1;
         }
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x20000000L) != 0L)
            return 1;
         return -1;
      case 12:
         if ((active0 & 0x28001000008000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 12;
            return 1;
         }
         if ((active1 & 0x1L) != 0L)
            return 1;
         return -1;
      case 13:
         if ((active0 & 0x20001000008000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 13;
            return 1;
         }
         if ((active0 & 0x8000000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 1;
         return -1;
      case 14:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 14;
            return 1;
         }
         if ((active0 & 0x20001000000000L) != 0L)
            return 1;
         return -1;
      case 15:
         if ((active0 & 0x8000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_0(0x38818809e0780000L, 0x60a008000L);
      case 44:
         return jjStopAtPos(0, 17);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 16, 9);
      case 47:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 58:
         return jjStopAtPos(0, 9);
      case 59:
         return jjStopAtPos(0, 18);
      case 61:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x8006000002000000L, 0x10044000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x4000000001800000L, 0x1000030105L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x3000000000L, 0x200000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x40000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x18000200000000L, 0x2000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x2L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x500000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x8L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x60004000000L, 0x180000200L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x60000000000000L, 0x804000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x2020080000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc40L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x14008000000L, 0x1000L);
      case 91:
         return jjStopAtPos(0, 68);
      case 93:
         return jjStopAtPos(0, 69);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 44);
      case 125:
         return jjStopAtPos(0, 45);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 81);
         break;
      case 50:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 61:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 62:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 65:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 85, 1);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 90, 1);
         break;
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x1081080860400000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x80180000L, active1, 0x8000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000000L, active1, 0x8000000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x200000000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x2000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1400000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x66004000000L, active1, 0x980100ec0L);
      case 102:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100800c000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 111:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 83, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000001000L, active1, 0x23105L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x840000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000200000000L, active1, 0x3020000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x802000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 62:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 46);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      case 83:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 1);
         break;
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2400000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000L, active1, 0L);
      case 100:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0x800100L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8800800080084000L, active1, 0x1040010008L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x20008000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x180420000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000100001000L, active1, 0x5L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x201100000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2200000000000000L, active1, 0x2040002L);
      case 114:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x1081081800c00000L, active1, 0x201001c40L);
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x10008000000L, active1, 0x4080L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 119:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 84, 1);
         break;
      case 120:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x18000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 97:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x2024000000L, active1, 0x1001810282L);
      case 98:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0xc00L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000100102000L, active1, 0x2040000005L);
      case 100:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 1);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 1);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 1);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x10810a1840400000L, active1, 0x40000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x8000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0x20000000L);
      case 104:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x202004000L);
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x180000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000800000L, active1, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000008000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      case 73:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x60000000000000L, active1, 0x800L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x3081080800400000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1040000000L, active1, 0x2L);
      case 101:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000001802000L, active1, 0x408000005L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x8000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80008000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40100000000L, active1, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x200040000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x24000L);
      case 114:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x404000000L, active1, 0x1000800200L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2002180000L, active1, 0x40000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x180000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x18000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x840000000000L, active1, 0x8L);
      case 100:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 1);
         break;
      case 101:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 1);
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0xa3000080L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20080000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2100000L, active1, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80800000L, active1, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000008000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x5L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000002000L, active1, 0x400020000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 1);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(5, 97);
         return jjMoveStringLiteralDfa6_0(active0, 0x3081081800400000L, active1, 0x40000002L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x82000000L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x4000L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x104000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 31);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 1);
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(6, 61);
         return jjMoveStringLiteralDfa7_0(active0, 0x81080c20500000L, active1, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0x40020000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x8008000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000408L);
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x800800000000000L, active1, 0x20000080L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0x8000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 1);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 1);
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0x1000005L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000004000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L);
      case 73:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0x1L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x80800000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x20400000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x800002008000L, active1, 0x400000400L);
      case 98:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 1);
         break;
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(7, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0x29004000L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1040002000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800L);
      case 115:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 73:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 1);
         break;
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x22000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x801000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x20400000L, active1, 0x400000400L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L);
      case 101:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 81, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L, active1, 0L);
      case 103:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 94, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x80c40000000L, active1, 0L);
      case 108:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 95, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L, active1, 0x800L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0x1L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x80001000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L);
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 1);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(8, 91);
         return jjMoveStringLiteralDfa9_0(active0, 0x2080000L, active1, 0x1004000L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8100000L, active1, 0x2000000L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L, active1, 0x20000000L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8100000L, active1, 0x800L);
      case 98:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 78, 1);
         break;
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(9, 19);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(9, 98);
         return jjMoveStringLiteralDfa10_0(active0, 0x80800020400000L, active1, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x800080c40000000L, active1, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000001000000L, active1, 0L);
      case 115:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 88, 1);
         break;
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 74, 1);
         break;
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 25, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0x8000L);
      case 69:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 49, 1);
         break;
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x1001000000000L, active1, 0x20000001L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L, active1, 0L);
      case 107:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x28400000L, active1, 0L);
      case 112:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(10, 75, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0x4L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 1);
         break;
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(10, 30);
         return jjMoveStringLiteralDfa11_0(active0, 0x800000100000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L, active1, 0x8001L);
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(11, 34, 1);
         break;
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(11, 22);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(11, 29);
         return jjMoveStringLiteralDfa12_0(active0, 0x800800000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000100000L, active1, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 93, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000008000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L, active1, 0L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(12, 47);
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(12, 64, 1);
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L, active1, 0x2008000L);
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(12, 55);
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 51, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x800001000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(13, 20);
         break;
      case 112:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(13, 66, 1);
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(13, 27);
         break;
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L, active1, 0L);
      case 121:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(13, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 53, 1);
         break;
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 36, 1);
         break;
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(14, 35);
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(15, 15, 1);
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8000L);
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(15, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(16, 59);
         break;
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 121:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(17, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 81;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(50, 51); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 46)
                     { jjCheckNAdd(9); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 81:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  else if (curChar == 10)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(4, 9); }
                  else if (curChar == 45)
                     { jjCheckNAddStates(10, 12); }
                  else if (curChar == 35)
                     { jjCheckNAddStates(13, 15); }
                  else if (curChar == 47)
                     { jjAddStates(16, 17); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(18, 20); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(21, 23); }
                  else if (curChar == 46)
                     { jjCheckNAdd(9); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     { jjCheckNAddTwoStates(6, 7); }
                  }
                  else if (curChar == 48)
                     { jjAddStates(24, 25); }
                  if (curChar == 48)
                  {
                     if (kind > 104)
                        kind = 104;
                     { jjCheckNAddTwoStates(3, 4); }
                  }
                  break;
               case 1:
                  if ((0x7ff600000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar != 48)
                     break;
                  if (kind > 104)
                     kind = 104;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 3:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 5:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 8:
                  if (curChar == 46)
                     { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(26, 28); }
                  break;
               case 11:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 14:
                  if (curChar == 34)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 15:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 17:
                  if ((0x8000008400000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 18:
                  if (curChar == 34 && kind > 109)
                     kind = 109;
                  break;
               case 19:
                  if (curChar == 48)
                     { jjCheckNAddStates(29, 32); }
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(29, 32); }
                  break;
               case 21:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddStates(33, 36); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(33, 36); }
                  break;
               case 23:
                  if (curChar == 48)
                     { jjAddStates(37, 38); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(39, 42); }
                  break;
               case 27:
                  if (curChar == 39)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 28:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 30:
                  if ((0x8000000400000000L & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 31:
                  if (curChar == 39 && kind > 110)
                     kind = 110;
                  break;
               case 32:
                  if (curChar == 48)
                     { jjCheckNAddStates(43, 46); }
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(43, 46); }
                  break;
               case 34:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddStates(47, 50); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(47, 50); }
                  break;
               case 36:
                  if (curChar == 48)
                     { jjAddStates(51, 52); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 40:
                  if (curChar == 48)
                     { jjAddStates(24, 25); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjAddStates(57, 58); }
                  break;
               case 45:
                  if (curChar == 47)
                     { jjAddStates(16, 17); }
                  break;
               case 47:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 48:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 49:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(50, 51); }
                  break;
               case 50:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 51); }
                  break;
               case 51:
                  if (curChar == 42)
                     { jjAddStates(59, 60); }
                  break;
               case 52:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(53, 51); }
                  break;
               case 53:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(53, 51); }
                  break;
               case 54:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 55:
                  if (curChar == 35)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 56:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(61, 64); }
                  break;
               case 58:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 59:
                  if (curChar == 34)
                     { jjCheckNAdd(60); }
                  break;
               case 60:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(60, 61); }
                  break;
               case 61:
                  if (curChar == 34)
                     { jjCheckNAddStates(65, 67); }
                  break;
               case 62:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(68, 71); }
                  break;
               case 64:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(72, 74); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 62); }
                  break;
               case 66:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(75, 79); }
                  break;
               case 68:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 69:
                  if (curChar == 45)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 72:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  { jjCheckNAddTwoStates(73, 74); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(76, 77); }
                  break;
               case 77:
                  if (curChar != 46)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(80, 82); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(80, 82); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(79, 8); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(4, 9); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 81:
               case 47:
                  { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  { jjCheckNAdd(1); }
                  break;
               case 4:
                  if ((0x20100000201000L & l) != 0L && kind > 104)
                     kind = 104;
                  break;
               case 7:
                  if ((0x20100000201000L & l) != 0L && kind > 105)
                     kind = 105;
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(83, 84); }
                  break;
               case 13:
                  if ((0x104000001040L & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 16:
                  if (curChar == 92)
                     { jjAddStates(85, 88); }
                  break;
               case 17:
                  if ((0x54404610000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 24:
                  if (curChar == 120)
                     { jjCheckNAdd(25); }
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(39, 42); }
                  break;
               case 26:
                  if (curChar == 88)
                     { jjCheckNAdd(25); }
                  break;
               case 28:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 29:
                  if (curChar == 92)
                     { jjAddStates(89, 92); }
                  break;
               case 30:
                  if ((0x54404610000000L & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 37:
                  if (curChar == 120)
                     { jjCheckNAdd(38); }
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(53, 56); }
                  break;
               case 39:
                  if (curChar == 88)
                     { jjCheckNAdd(38); }
                  break;
               case 41:
                  if (curChar == 120)
                     { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddTwoStates(42, 43); }
                  break;
               case 43:
                  if ((0x20100000201000L & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 44:
                  if (curChar == 88)
                     { jjCheckNAdd(42); }
                  break;
               case 50:
                  { jjCheckNAddTwoStates(50, 51); }
                  break;
               case 52:
               case 53:
                  { jjCheckNAddTwoStates(53, 51); }
                  break;
               case 60:
                  { jjAddStates(93, 94); }
                  break;
               case 67:
               case 68:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(68); }
                  break;
               case 71:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(95, 96); }
                  break;
               case 74:
                  if ((0x104000001040L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 81:
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(21, 23); }
                  break;
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(18, 20); }
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(50, 51); }
                  break;
               case 52:
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(53, 51); }
                  break;
               case 60:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(93, 94); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 81 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   76, 77, 79, 8, 76, 77, 79, 8, 70, 71, 8, 70, 75, 56, 57, 67, 
   46, 49, 28, 29, 31, 15, 16, 18, 41, 44, 9, 10, 13, 15, 16, 20, 
   18, 15, 16, 22, 18, 24, 26, 15, 16, 25, 18, 28, 29, 33, 31, 28, 
   29, 35, 31, 37, 39, 28, 29, 38, 31, 42, 43, 52, 54, 57, 58, 59, 
   62, 62, 63, 66, 64, 65, 62, 63, 64, 65, 62, 64, 65, 62, 63, 66, 
   78, 10, 13, 11, 12, 17, 19, 21, 23, 30, 32, 34, 36, 60, 61, 72, 
   73, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\57", "\72", "\151\156\170", 
"\57\57", "\156\157\156\145", "\163\165\143\143\145\163\163\157\162", 
"\166\151\145\167", "\146\151\143\164\151\157\156\141\154\55\146\165\164\165\162\145", "\56", 
"\54", "\73", "\44\104\145\142\165\147\110\145\162\145", 
"\44\104\157\143\165\155\145\156\164\141\164\151\157\156", "\44\55\55", "\44\103\162\145\141\164\145\123\143\145\156\145", 
"\103\165\162\162\145\156\164", "\103\154\157\163\145\117\164\150\145\162\163", 
"\101\144\144\123\165\155\155\141\162\171", "\122\145\154\141\164\145\144\101\163", 
"\127\151\164\150\40\111\156\163\164\141\156\143\145\163", "\55\76", "\44\103\150\141\156\147\145\123\143\145\156\145", 
"\44\103\150\145\143\153\120\157\151\156\164", "\44\104\145\146\151\156\145", "\44\111\156\143\154\165\144\145", 
"\106\162\157\155", "\111\146\116\157\164\104\145\146\151\156\145\144", 
"\44\103\162\145\141\164\145\114\151\156\153\124\171\160\145", "\104\151\162\145\143\164\151\157\156\120\141\151\162\145\144", 
"\104\145\146\141\165\154\164", "\127\145\151\147\150\164", "\75", "\127\151\164\150", 
"\122\145\166\145\162\163\145", "\122\145\147\165\154\141\162", "\44\103\162\145\141\164\145\114\151\156\153", 
"\173", "\175", "\75\75\76", "\44\123\145\164\120\141\162\141\155\145\164\145\162", 
"\44\103\162\145\141\164\145\120\141\162\141\155\145\164\145\162", "\101\115\137\111\116\123\124\101\116\103\105", "\101\115\137\126\111", 
"\106\117\103\125\123\137\111\116\123\124\101\116\103\105", "\106\117\103\125\123\137\126\111", 
"\123\110\101\104\117\127\137\111\116\123\124\101\116\103\105", "\123\110\101\104\117\127\137\126\111", 
"\44\103\162\145\141\164\145\105\156\145\162\147\171", "\117\146", "\124\171\160\145", "\105\62\123", 
"\44\120\145\162\146\157\162\155\141\156\143\145\115\145\164\145\162", "\44\103\162\145\141\164\145", "\44\125\160\144\141\164\145", 
"\103\157\156\143\145\160\164", "\101\162\145\141", "\103\157\156\143\145\160\164\111\155\160\141\143\164", 
"\111\155\160\141\143\164\163", "\103\157\156\143\145\160\164\117\166\145\162\154\141\160", 
"\117\166\145\162\154\141\160\163", "\133", "\135", "\126\145\162\142", "\115\145\164\141\126\145\162\142", 
"\103\157\144\145", "\122\145\154\141\164\151\157\156", 
"\126\145\162\142\111\155\160\141\143\164", "\126\145\162\142\117\166\145\162\154\141\160", "\127\157\162\144", 
"\106\157\162", "\101\143\164\151\157\156\126\145\162\142", 
"\44\104\151\146\146\165\163\151\157\156\101\143\164\151\166\151\164\171", "\103\154\145\141\162", "\103\157\155\160\157\163\151\164\145", 
"\101\160\160\145\156\144", "\124\157", "\116\145\167", "\104\101", "\116\141\155\145", 
"\125\160\144\141\164\145", "\120\141\162\141\155\145\164\145\162\163", 
"\44\123\160\151\153\145\101\143\164\151\166\151\164\171", "\123\101", "\44\117\142\163\145\162\166\145\162", "\101\144\144", 
"\124\162\151\147\147\145\162\145\144\55\141\164", "\105\170\145\143\165\164\151\156\147", 
"\122\145\155\157\166\145\101\154\154", "\122\145\155\157\166\145", "\44\120\162\151\156\164", 
"\44\116\141\155\145\163\160\141\143\145", "\123\145\164", "\103\162\145\141\164\145", "\124\162\141\143\145", null, null, 
null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public XapiLangTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public XapiLangTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 81; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x7fffffffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[81];
    private final int[] jjstateSet = new int[2 * 81];

    
    protected char curChar;
}
